#include <iostream>
#include<stdlib.h> 
#include<stdio.h> 

using namespace std;

int merge(int arr[], int left, int middle, int right) 
{ 
	int i = left, j = middle, k = left, count = 0, temp[right + 1];
  
	while (i <= middle - 1 && j <= right) 
  { 
		if (arr[i] <= arr[j]) { 
			temp[k] = arr[i]; 
      k++;
      i++;
		} 
		else 
    { 
			temp[k] = arr[j]; 
      k++;
      j++;
			count = count + (middle - i); 
		} 
	} 

	while (i <= middle - 1)
  {
    temp[k] = arr[i]; 
    k++;
    i++;
  }

	while (j <= right) 
  {
    temp[k] = arr[j];
    k++;
    j++;
  }

	for (i = left; i <= right; i++)
  {
    arr[i] = temp[i];
  } 
	return count; 
}

int mergeSort(int arr[], int left, int right) 
{ 
    int middle, count = 0;
    if (right > left)
    { 
      middle = (right + left) / 2; 
      count = count + mergeSort(arr, left, middle); 
      count = count + mergeSort(arr, middle + 1, right); 
  
      count = count + merge(arr, left, middle + 1, right); 
    } 
    return count;
} 

int mergeCall(int arr[], int arrSize) 
{
  return mergeSort(arr, 0, arrSize - 1); 
} 

int main() {
  int arr[] = { 1, 5, 4, 8, 10, 2, 6, 9, 12, 11, 3, 7};
  int size = sizeof(arr) / sizeof(arr[0]);
  int num = mergeCall(arr, size);
  cout << " Number of inversions are " << num;
  return 0;
}
